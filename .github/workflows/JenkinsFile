def requestBody = []
def stepCount = 0
def generalStatus = 'PASS'
pipeline {
    agent {
        kubernetes {
            cloud 'Openshift PRO'
            label 'y45-openshift-s'
            defaultContainer 'jnlp'
        }
    }

    tools {
        jdk 'JDK_1.8.0_Latest'
    }

    post {

        always {
            script {
                def data = readFile(file: 'Testdata.txt').split('\n')
                def BUILD_MAIL = ""
                data.each {
                    if (it.contains("BUILD_MAIL")) {
                        BUILD_MAIL = it.split("=")[1]
                    }
                }
                if (currentBuild.currentResult == 'FAILURE') {
                    step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: "$BUILD_MAIL", sendToIndividuals: true])
                }
            }
        }
    }

    stages {

        // Stage-5 Submitting the SOF/MPP & Validation job in mainframe
        stage("Submitting Job") {
            steps {
                script {

                    def data = readFile(file: 'Testdata.txt').split('\n')
                    def JCL_DETAILS = ""
                    def MAINFRAME_PASS = ""
                    def SOF = ""
                    def SUBSYSTEM = ""
                    data.each {
                        if (it.contains("JCL_DETAILS")) {
                            JCL_DETAILS = it.split("=")[1]
                        } else if (it.contains("MAINFRAME_PASS")) {
                            MAINFRAME_PASS = it.split("=")[1]
                        } else if (it.contains("SOF")) {
                            SOF = it.split("=")[1]
                        } else if (it.contains("SUBSYSTEM")) {
                            SUBSYSTEM = it.split("=")[1]
                        } else if (it.contains("PLATFORM")) {
                            PLATFORM = it.split("=")[1]
                        }
                    }

                    def req4data = "'$SUBSYSTEM" + "TN000.DSNP.JCL(" + "$JCL_DETAILS" + ")\\'"
                    def req3data = '"file":"//\\'
                    def req5data = '"'
                    def req6data = '{' + "$req3data" + "$req4data" + "$req5data" + '}'
                    def joburl = https://zosmf${PLATFORM}t.be.srv.dev.sys:32208/zosmf/restjobs/jobs

                    httpRequest acceptType: 'APPLICATION_JSON',
                            consoleLogResponseBody: true,
                            contentType: 'APPLICATION_JSON',
                            authentication: "$MAINFRAME_PASS",
                            customHeaders: [[maskValue: false, name: 'X-CSRF-ZOSMF-HEADER', value: '""']],
                            httpMode: 'PUT',
                            requestBody: "${req6data}",
                            responseHandle: 'NONE',
                            url: joburl,
                            outputFile: "$SOF" + 'Job.txt',
                            wrapAsMultipart: false
                }
                script
                        {
                            echo 'Waiting 1 min to complete Job'
                            sleep 20 // seconds
                        }
                script {

                    def data = readFile(file: 'Testdata.txt').split('\n')
                    def JCL_DETAILS = ""
                    def MAINFRAME_PASS = ""
                    def SOF = ""
                    data.each {
                        if (it.contains("JCL_DETAILS")) {
                            JCL_DETAILS = it.split("=")[1]
                        } else if (it.contains("MAINFRAME_PASS")) {
                            MAINFRAME_PASS = it.split("=")[1]
                        } else if (it.contains("SOF")) {
                            SOF = it.split("=")[1]
                        } else if (it.contains("PLATFORM")) {
                            PLATFORM = it.split("=")[1]
                        }
                    }
                    def data1 = readFile(file: "$SOF" + 'Job.txt').split("\"jobid\":\"")[1]
                    def jobid = data1.split("\",\"")[0]
                    def data2 = readFile(file: "$SOF" + 'Job.txt').split("\"jobname\":\"")[1]
                    def jobname = data2.split("\",\"")[0]
                    def url = https://zosmf${PLATFORM}t.be.srv.dev.sys:32208/zosmf/restjobs/jobs/${jobname}/${jobid}
                    httpRequest acceptType: 'APPLICATION_JSON',
                            consoleLogResponseBody: true,
                            contentType: 'APPLICATION_JSON',
                            authentication: "$MAINFRAME_PASS",
                            customHeaders: [[maskValue: false, name: 'X-CSRF-ZOSMF-HEADER', value: '""']],
                            responseHandle: 'NONE',
                            url: url,
                            outputFile: "$SOF" + 'Jobout.txt',
                            wrapAsMultipart: false
                    //}
                }
            }
        }

       // Stage-6 Verify JCL ran successfully or not
       stage("Verifying the JCL Return Code") {
           steps {
               script {
                   def data = readFile(file: 'Testdata.txt').split('\n')
                   def VALIDATION_ID = ""
                   def SOF = ""
                   data.each {
                       if (it.contains("VALIDATION_ID")) {
                           VALIDATION_ID = it.split("=")[1]
                       } else if (it.contains("SOF")) {
                           SOF = it.split("=")[1]
                       }
                   }
                   def status = ""
                   def record1 = ""
                   def retcode = readFile(file: "$SOF" + 'Jobout.txt').split("\"retcode\":")[1].replace("}", "")
                   if (retcode.contains("CC 0000") || retcode.contains("CC 0004") || retcode.contains("CC 0999") || retcode.contains("null") || retcode.contains("CC 0008")) {
                       status = "PASS"
                       println "JCL submitted successfully"
                       record1 = "JCL submitted successfully"
                   } else {
                       status = "FAIL"
                       println status
                       println "Error code in JCL submission"
                       record1 = "Error code in JCL submission"
                       generalStatus = "FAIL"
                   }
                   println "retcode: $retcode"
                   println "status: $status"
                   requestBody.add(generateStepResult(stepCount,status,record1))
                   stepCount += 1
                   //println "requestBody = ${requestBody}"
                   if (status == "FAIL") {
                       error "This pipeline stops here!"
                   }
               }
           }
       }
       // Stage 7 - Reading the Output File generated in Mainframe
       stage("Reading output file generated in Mainframe")
               {
                   steps
                           {
                               script {
                                   def data = readFile(file: 'Testdata.txt').split('\n')

                                   def MAINFRAME_PASS = ""
                                   def SOF = ""
                                   def OUTPUT_FILE = ""
                                   data.each {
                                       if (it.contains("MAINFRAME_PASS")) {
                                           MAINFRAME_PASS = it.split("=")[1]
                                       } else if (it.contains("SOF")) {
                                           SOF = it.split("=")[1]
                                       } else if (it.contains("OUTPUT_FILE")) {
                                           OUTPUT_FILE = it.split("=")[1]
                                       } else if (it.contains("PLATFORM")) {
                                           PLATFORM = it.split("=")[1]
                                       }
                                   }
                                   def outurl = https://zosmf${PLATFORM}t.be.srv.dev.sys:32208/zosmf/restfiles/ds/$OUTPUT_FILE
                                   httpRequest consoleLogResponseBody: true, contentType: 'APPLICATION_JSON',
                                           authentication: "$MAINFRAME_PASS",
                                           customHeaders: [[maskValue: false, name: 'X-CSRF-ZOSMF-HEADER', value: '""']],
                                           httpMode: 'GET',
                                           outputFile: "$SOF" + 'File.txt',
                                           encoding: 'UTF-8',
                                           responseHandle: 'NONE',
                                           url: outurl,
                                           wrapAsMultipart: false
                               }
                           }
               }
       // Stage 8 - Reading the Fail Test Case File generated in Mainframe
       stage("Reading FAIL TEST CASE file generated in Mainframe")
               {
                   steps
                           {
                               script {
                                   def data = readFile(file: 'Testdata.txt').split('\n')
                                   def FAIL_FILE = ""
                                   def MAINFRAME_PASS = ""
                                   def SOF = ""
                                   data.each {
                                       if (it.contains("FAIL_FILE")) {
                                           FAIL_FILE = it.split("=")[1]
                                       } else if (it.contains("MAINFRAME_PASS")) {
                                           MAINFRAME_PASS = it.split("=")[1]
                                       } else if (it.contains("SOF")) {
                                           SOF = it.split("=")[1]
                                       } else if (it.contains("PLATFORM")) {
                                           PLATFORM = it.split("=")[1]
                                       }
                                   }
                                   failurl = https://zosmf${PLATFORM}t.be.srv.dev.sys:32208/zosmf/restfiles/ds/$FAIL_FILE
                                   httpRequest consoleLogResponseBody: true, contentType: 'APPLICATION_JSON',
                                           authentication: "$MAINFRAME_PASS",
                                           customHeaders: [[maskValue: false, name: 'X-CSRF-ZOSMF-HEADER', value: '""']],
                                           httpMode: 'GET',
                                           outputFile: "$SOF" + 'Fail.txt',
                                           responseHandle: 'NONE',
                                           url: failurl,
                                           wrapAsMultipart: false
                               }
                               script {

                                   def data = readFile(file: 'Testdata.txt').split('\n')

                                   def MAIL = ""
                                   def SOF = ""
                                   data.each {
                                       if (it.contains("MAIL")) {
                                           MAIL = it.split("=")[1]
                                       } else if (it.contains("SOF")) {
                                           SOF = it.split("=")[1]
                                       }
                                   }
                                   def retfile = readFile("$SOF" + 'Fail.txt')
                                   if (retfile.size() == 0) {
                                       println "No Failed Test Cases"
                                   } else {
                                       println "Mail Valid Report in case of Failed Test Cases"
                                       emailext attachmentsPattern: "$SOF" + 'File.txt',
                                               body: '''Please review the validation test results ''',
                                               subject: 'FET-' + "$SOF" + '_VALIDATION REPORT',
                                               to: "$MAIL"
                                   }
                               }
                           }
               }
           stage("Parsing output file & return the results to parent") {
               steps {
                   script {
                       def data = readFile(file: 'Testdata.txt').split('\n')

                       def SOF = ""
                       data.each {
                           if (it.contains("SOF")) {
                               SOF = it.split("=")[1]
                           }
                       }

                       def data1 = readFile(file: "$SOF" + 'File.txt').split('\n')
                       String flag = "false"
                       def records = ""
                       def testCaseKey = ""
                       def projectKey = ""
                       def reportObject = ""
                       data1.each {
                           if (it.contains("-----------------------------------------------------") && flag == "false") {
                               flag = "true"
                           } else if (it.contains("TEST-CASE-RESULT :")) {
                               def status = it.split(":")[1].trim()
                                    if (status == "FAIL")
                                       {
                                          generalStatus = "FAIL"
                                       }
                               requestBody.add(generateStepResult(stepCount, status, records))

                               stepCount += 1
                               flag = "false"
                               records = ""
                           } else if (flag == "true") {
                               if (it.contains("TEST-CASE-ID")) {
                                   testCaseKey = it.split(":")[1]
                                   projectKey = testCaseKey.split("-")[0]
                                   println "ProjectKey: ${projectKey} -- TestCaseKey: ${testCaseKey}"
                               } else {
                                   records = records + it + " <br/>"
                               }
                           }
                       }
                       reportObject = (generateReportData(requestBody, generalStatus, testCaseKey))

                       writeFile file: "report.json", text: reportObject

                       archiveArtifacts artifacts: "report.json", fingerprint: true

                   }

           }


       }



    }
}
